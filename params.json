{"name":"pmatic","tagline":"A simple API to to the Homematic CCU2","body":"# pmatic - A simple API to to the Homematic CCU2\r\n\r\n[![Build Status](https://travis-ci.org/LaMi-/pmatic.svg?branch=master)](https://travis-ci.org/LaMi-/pmatic)\r\n[![Coverage Status](https://coveralls.io/repos/LaMi-/pmatic/badge.svg?branch=master&service=github)](https://coveralls.io/github/LaMi-/pmatic?branch=master)\r\n\r\npmatic is a python library to provide access to the Homematic CCU2. You\r\ncan execute pmatic directly on the CCU2 or another system having Python\r\ninstalled. With pmatic you can write your own Python scripts to communicate\r\nwith your CCU2 devices.\r\n\r\nBefore I built this API I tried to create a small script to *just* check\r\nall my window sensors, record the time they are opened and then alarm\r\nme to close the window if it was open for too long. No problem I thought.\r\nLesson learned: It is possible. But only while having a huuuuge pain.\r\nThe scripting language is crapy, the web GUI editor misses basic things\r\nlike syntax highlighting, undo/redo, auto saving and so on which make\r\nprogramming comfortable. Last but not least the debugging was a pain\r\nor not possible at all.\r\n\r\nShould be possible to make this a lot easier.\r\n\r\nI found several other middlewares and libraries for accessing the CCU2\r\nAPIs, but most of them required to be executed in somehow specific\r\nenvironments, were not platform independet or implemented in other crapy\r\nprogramming languages.\r\n\r\nI know sure there is still much room for improvement and cleaner APIs,\r\nbut for the moment I think even this small API wrapper is an improvement.\r\n\r\n## So how does it work?\r\n\r\npmatic has been implemented in Python. What? Python is not available on\r\nthe CCU2, do I need to run it remotely on a separate device now? Yes,\r\nyou can. But it is also possible to use it on the CCU2 by installing\r\na python interpreter with the necessary modules on the device. We'll\r\nget back to it later.\r\n\r\nSo you have the option to run your pmatic scripts remotely and on the\r\nCCU2. The code stays the same. This means you can develop your scripts\r\non your workstation, test and debug it using a remote connection to\r\nyour CCU2.\r\n\r\nYou can use all the API methods provided by the CCU2. The data is parsed\r\nand available as python lists or dicts. You can then process the data\r\nin your Python code and use the editor of your choice, use all possible\r\ndebugging and profiling features you can imagine with Python.\r\n\r\nIt's so much fun :-).\r\n\r\nEven if you write pmatic in Python, you can also execute custom ReGa\r\n(Homematic Script) through pmatic and also process the output of these\r\nscripts, if you like.\r\n\r\n## Requirements\r\n\r\npmatic is currently not expecting any special Python modules. pmatic\r\nis supported with Python 2.7, 3.4 and newer. Older versions of Python are not\r\nsupported.\r\n\r\nPlease note about Python 3: I started development with Python 2.7 and have\r\nnot tested the code very well with Python 3. So there may still be bugs. I\r\nwelcome patches!\r\n\r\n## Installation\r\n\r\n### Installation on the CCU2\r\n\r\npmatic can be packed as CCU addon package. On first release I will provide a\r\npre-packed package for the CCU.\r\n\r\nUntil the first release you can create CCU addon packages on your own by\r\nfollowing these steps on a linux host:\r\n\r\n* download a snapshot of the git repository or clone the repository\r\n* run `make setup chroot dist-ccu`\r\n\r\nNow you should have a CCU addon archive at `dist/pmatic-0.1_ccu.tar.gz`.\r\nYou can now upload this file to your CCU to install pmatic on it.\r\n\r\nNow you can connect to your CCU via SSH and run this command to confirm\r\npmatic has been installed correctly:\r\n\r\n```\r\npython -c 'import pmatic'\r\n```\r\n\r\nWhen the command completes silently (without `ImportError` exception) the\r\ninstallation was successful.\r\n\r\nThe installation has been finished. You can now execute your own\r\npython and pmatic scripts on your CCU. For some examples you can change\r\nto `/etc/config/addons/pmatic/examples` and have a look at the source or\r\njust try them.\r\n\r\n### Installation on your workstation\r\n\r\nThe installation should be straight forward. First download pmatic by either\r\ncloning from the Git or download a release archive, unpack it and change to\r\nthe extracted directory `pmatic-*`. Then execute:\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\nAfter installation you can confirm pmatic has been installed by executing\r\n\r\n```\r\npython -c 'import pmatic'\r\n```\r\n\r\nWhen the command completes silently (without `ImportError` exception) the\r\ninstallation was successful.\r\n\r\n\r\nI developed and tested pmatic on a Debian 8 system with Python 2.7.9, but\r\npmatic should work on other platforms meeting the requirements listed above.\r\n\r\nPlease let me know or send me a pull request if there are compatibility\r\nissues on a platform you would expect pmatic to work.\r\n\r\n## Usage\r\n\r\nPlease take a look at the scripts below the `examples` directory for some\r\nsample scripts. I'll try to add more in the near future. Just to give you\r\na quick view, here a simple example how to list all shutter contacts and\r\ntheir current states on the CCU2:\r\n\r\n```\r\nimport pmatic.api\r\nfrom pmatic.entities import HMSecSC\r\n\r\nAPI = pmatic.api.init()\r\n\r\nfor device in HMSecSC.get_all(API):\r\n    print device.name, device.formated_value()\r\n```\r\n\r\n## Reporting Bugs, Feature Requests\r\n\r\nPlease use the issue tracker on the [pmatic GitHub page](https://github.com/LaMi-/pmatic).\r\n\r\n## Licensing\r\n\r\nCopyright (C) 2016 Lars Michelsen <lm@larsmichelsen.com>\r\n\r\nAll outcome of the project is licensed under the terms of the GNU GPL v2.\r\nTake a look at the LICENSE file for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}